buildscript {
  repositories {
    mavenCentral()
    maven { url "http://maven.restlet.org" }
  }

  dependencies {
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: '2.3.8'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-print', version: '1.1.5'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.3.5'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
}

defaultTasks 'website'

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask

/* All of the hand-authored pages */
def pages = [
             'index',
             'background_index',
             'faq_index',
             'contact_index',
             'implementations_index',
             'library_index',
             'extensions_index'
            ]

/* Create a task for each page to update it if necessary */
pages.each { page ->
  def basename = page.replace("_", "/")
  task "$page" (dependsOn: ['menus','gitlog'], type: DocBookTask) {
    inputs.file "${basename}.xml"
    inputs.file "etc/menu.xml"
    inputs.file "include/header.html"
    inputs.file "style/webpage.xpl"
    inputs.file "style/webpage.xsl"
    outputs.file "${basename}.html"

    input("source", "${basename}.xml")
    output("result", "${basename}.html")
    pipeline "style/webpage.xpl"
  }
}

/* The task that updates all of the page headers */
task menus(type: XMLCalabashTask) {
  inputs.file "etc/menu.xml"
  inputs.file "style/menus.xsl"
  inputs.file "style/menus.xpl"
  outputs.file "menus/PLACEHOLDER.html"

  input("source", "etc/menu.xml")
  output("result", "menus/PLACEHOLDER.html")
  pipeline "style/menus.xpl"
}

/* Get the current git log in XML */
task gitlog(type: Exec) {
  if (System.getProperty('os.name').toLowerCase().contains('windows')) {
    commandLine "cmd", "/c", "perl", "bin/git-log-summary"
  } else {
    commandLine "bin/git-log-summary"
  }
  standardOutput = new FileOutputStream(new File("etc/git-log-summary.xml"))
}

/* The default task. It just depends on all the necessary pages */
task website(dependsOn: [pages]) {
  /* Nothing to see here */
}

task clean
clean.doFirst {
  delete "$buildDir"
  delete ".gradle"
  delete "menus"
  delete "etc/git-log-summary.xml"
  pages.each { page ->
    def basename = page.replace("_", "/")
    delete "${basename}.html"
  }
}
